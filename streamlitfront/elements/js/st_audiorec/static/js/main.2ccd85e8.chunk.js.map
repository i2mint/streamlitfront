{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onStartRecording","disabled","isRecording","onStopRecording","onStop","onStopAudio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","RecordState","START","setState","Streamlit","setComponentValue","STOP","data","url","reader","FileReader","onloadend","arrayBuffer","result","Int32Array","readAsArrayBuffer","blob","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAkBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,GAAIC,OAAO,G,EAExEC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAEnC,EAAsC,EAAKR,MAAnCE,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAGrB,GAAIG,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKT,MAAMC,UAAYK,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,4BAAQI,GAAG,SAASC,QAAS,EAAKC,iBAAkBC,SAAU,EAAKC,eAAnE,mBAGA,4BAAQJ,GAAG,OAAOC,QAAS,EAAKI,gBAAiBF,UAAW,EAAKC,eAAjE,QAWA,kBAAC,IAAD,CACEjB,MAAOE,EACPiB,OAAQ,EAAKC,YACbC,KAAK,YACLC,gBAAgB,qBAChBC,gBAAgB,iBAChBC,YAAa,IACbC,aAAc,MAGhB,2BACEZ,GAAG,QACHa,UAAQ,EACRC,IAAKxB,O,EAQPc,YAAc,WACpB,OAAO,EAAKjB,MAAME,aAAe0B,IAAYC,O,EAGvCd,iBAAmB,WACzB,EAAKe,SAAS,CACZ1B,OAAO,EACPD,aAAc,GACdD,YAAa0B,IAAYC,QAE3BE,IAAUC,kBAAkB,K,EAGtBd,gBAAkB,WACxB,EAAKY,SAAS,CACZ1B,OAAO,EACPF,YAAa0B,IAAYK,Q,EAiCrBb,YAAc,SAACc,GACrB,IAAyB,IAArB,EAAKlC,MAAMI,MAEb,EAAK0B,SAAS,CACZ3B,aAAc,KAEhB4B,IAAUC,kBAAkB,QACzB,CACH,EAAKF,SAAS,CACZ3B,aAAc+B,EAAKC,MAOrB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WACjB,IAAIC,EAAcH,EAAOI,OACb,IAAIC,WAAWF,GAC3BR,IAAUC,kBAAkBI,EAAOI,SAErCJ,EAAOM,kBAAkBR,EAAKS,Q,yBArIXC,MA+IVC,cAAwB9C,GAIvCgC,IAAUe,oBAIVf,IAAUgB,iBCrKVC,IAAS3C,OACP,kBAAC,IAAM4C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2ccd85e8.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\nimport { createNoSubstitutionTemplateLiteral } from \"typescript\"\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState, audioDataURL } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onStartRecording} disabled={this.isRecording()}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onStopRecording} disabled={!this.isRecording()}>\n            Stop\n          </button>\n          {/* <button id='reset' onClick={this.onClick_reset} disabled={this.isRecording() || !audioDataURL}>\n            Reset\n          </button> */}\n\n          {/* <button id='continue' onClick={this.onClick_continue} disabled={this.isRecording() || !audioDataURL}>\n            Download\n          </button> */}\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStopAudio}\n            type='audio/wav'\n            backgroundColor='rgb(255, 255, 255)'\n            foregroundColor='rgb(255,76,75)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={audioDataURL}\n          />\n\n        </div>\n      </span>\n    )\n  }\n\n  private isRecording = () => {\n    return this.state.recordState == RecordState.START\n  }  \n\n  private onStartRecording = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onStopRecording = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  // private onClick_reset = () => {\n  //   this.setState({\n  //     reset: true,\n  //     audioDataURL: '',\n  //     recordState: RecordState.STOP\n  //   })\n  //   Streamlit.setComponentValue('')\n  // }\n\n  // private onClick_continue = () => {\n  //   if (this.state.audioDataURL !== '')\n  //   {\n  //     // get datetime string for filename\n  //     let datetime = new Date().toLocaleString();\n  //     datetime = datetime.replace(' ', '');\n  //     datetime = datetime.replace(/_/g, '');\n  //     datetime = datetime.replace(',', '');\n  //     var filename = 'streamlit_audio_' + datetime + '.wav';\n\n  //     // auromatically trigger download\n  //     const a = document.createElement('a');\n  //     a.style.display = 'none';\n  //     a.href = this.state.audioDataURL;\n  //     a.download = filename;\n  //     document.body.appendChild(a);\n  //     a.click();\n  //   }\n  // }\n\n  private onStopAudio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n      // var fileReader = new FileReader();\n      // fileReader.onload = function(event) {\n      //     Streamlit.setComponentValue(event.target.result)\n      // };\n      // fileReader.readAsArrayBuffer(data.blob);\n      const reader = new FileReader();\n      reader.onloadend = function () {\n        let arrayBuffer = reader.result as ArrayBuffer\n        let bytes = new Int32Array(arrayBuffer)\n        Streamlit.setComponentValue(reader.result);\n      };\n      reader.readAsArrayBuffer(data.blob);\n      // Streamlit.setComponentValue(data.url)\n    }\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}