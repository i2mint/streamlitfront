{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onClick_start","disabled","isRecording","onClick_stop","onClick_reset","onClick_continue","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","RecordState","START","setState","Streamlit","setComponentValue","STOP","datetime","Date","toLocaleString","filename","replace","a","document","createElement","display","href","download","body","appendChild","click","data","url","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","getElementById"],"mappings":"wQAkBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,GAAIC,OAAO,G,EAExEC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAEnC,EAAsC,EAAKR,MAAnCE,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAGrB,GAAIG,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKT,MAAMC,UAAYK,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,4BAAQI,GAAG,SAASC,QAAS,EAAKC,cAAeC,SAAU,EAAKC,eAAhE,mBAGA,4BAAQJ,GAAG,OAAOC,QAAS,EAAKI,aAAcF,UAAW,EAAKC,eAA9D,QAGA,4BAAQJ,GAAG,QAAQC,QAAS,EAAKK,cAAeH,SAAU,EAAKC,gBAAkBd,GAAjF,SAIA,4BAAQU,GAAG,WAAWC,QAAS,EAAKM,iBAAkBJ,SAAU,EAAKC,gBAAkBd,GAAvF,YAIA,kBAAC,IAAD,CACEH,MAAOE,EACPmB,OAAQ,EAAKC,aACbC,KAAK,YACLC,gBAAgB,qBAChBC,gBAAgB,iBAChBC,YAAa,IACbC,aAAc,MAGhB,2BACEd,GAAG,QACHe,UAAQ,EACRC,IAAK1B,O,EAQPc,YAAc,WACpB,OAAO,EAAKjB,MAAME,aAAe4B,IAAYC,O,EAGvChB,cAAgB,WACtB,EAAKiB,SAAS,CACZ5B,OAAO,EACPD,aAAc,GACdD,YAAa4B,IAAYC,QAE3BE,IAAUC,kBAAkB,K,EAGtBhB,aAAe,WACrB,EAAKc,SAAS,CACZ5B,OAAO,EACPF,YAAa4B,IAAYK,Q,EAIrBhB,cAAgB,WACtB,EAAKa,SAAS,CACZ5B,OAAO,EACPD,aAAc,GACdD,YAAa4B,IAAYK,OAE3BF,IAAUC,kBAAkB,K,EAGtBd,iBAAmB,WACzB,GAAgC,KAA5B,EAAKpB,MAAMG,aACf,CAEE,IAAIiC,GAAW,IAAIC,MAAOC,iBAItBC,EAAW,oBADfH,GADAA,GADAA,EAAWA,EAASI,QAAQ,IAAK,KACbA,QAAQ,KAAM,KACdA,QAAQ,IAAK,KACc,OAGzCC,EAAIC,SAASC,cAAc,KACjCF,EAAEjC,MAAMoC,QAAU,OAClBH,EAAEI,KAAO,EAAK7C,MAAMG,aACpBsC,EAAEK,SAAWP,EACbG,SAASK,KAAKC,YAAYP,GAC1BA,EAAEQ,U,EAIE3B,aAAe,SAAC4B,IACG,IAArB,EAAKlD,MAAMI,OAEb,EAAK4B,SAAS,CACZ7B,aAAc,KAEhB8B,IAAUC,kBAAkB,MAE5B,EAAKF,SAAS,CACZ7B,aAAc+C,EAAKC,MAErBlB,IAAUC,kBAAkBgB,EAAKC,O,yBA1HdC,MAqIVC,cAAwBtD,GAIvCkC,IAAUqB,oBAIVrB,IAAUsB,iBC3JVC,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,W","file":"static/js/main.ea7148d5.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\nimport { createNoSubstitutionTemplateLiteral } from \"typescript\"\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState, audioDataURL } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start} disabled={this.isRecording()}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop} disabled={!this.isRecording()}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset} disabled={this.isRecording() || !audioDataURL}>\n            Reset\n          </button>\n\n          <button id='continue' onClick={this.onClick_continue} disabled={this.isRecording() || !audioDataURL}>\n            Download\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(255, 255, 255)'\n            foregroundColor='rgb(255,76,75)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={audioDataURL}\n          />\n\n        </div>\n      </span>\n    )\n  }\n\n  private isRecording = () => {\n    return this.state.recordState == RecordState.START\n  }  \n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      // get datetime string for filename\n      let datetime = new Date().toLocaleString();\n      datetime = datetime.replace(' ', '');\n      datetime = datetime.replace(/_/g, '');\n      datetime = datetime.replace(',', '');\n      var filename = 'streamlit_audio_' + datetime + '.wav';\n\n      // auromatically trigger download\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = this.state.audioDataURL;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n      Streamlit.setComponentValue(data.url)\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}